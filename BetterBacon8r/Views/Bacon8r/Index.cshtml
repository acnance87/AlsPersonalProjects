@{
    ViewData["Title"] = "Bacon8r";
}
@model IEnumerable<string>
<link rel="shortcut icon" href="/favicon-kevin.ico" type="image/x-icon" />
<style>
    .button-spaced {
        margin: 2px;
    }

    .special {
        background-color: orange;
        color: white;
    }

        .special:hover {
            background-color: darkorange;
        }

    #baconated {
        display: none;
    }

    #iterationCount {
        border: 1px solid lightgray;
        color: blue;
        padding: 5px 15px 5px 15px;
        position: fixed;
        top: 1%;
        right: 5%;
    }

    /* Modal container styling */
    .modal {
        display: none; /* Hidden by default */
        position: fixed;
        left: 50%;
        top: 50%;
        margin-top: 15%;
        transform: translate(-50%, -50%);
        z-index: 1000;
        color: lightcoral;
        padding: 20px;
        border-radius: 10px;
        font-size: 6em;
        text-align: center;
        vertical-align: middle;
    }

    /* Flashing animation */
    @@keyframes flash {
        0%, 100% {
            opacity: 0;
        }

        50% {
            opacity: 1;
        }
    }

    /* Fade out animation */
    @@keyframes fadeOut {
        0% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }
</style>

<div class="container-fluid">
    <div id="resultsContainer">
        <div id="navigationContainer">
            <h2>Your mission, should you choose to accept it...</h2>
            <p>Find the Wiki page for <b>Kevin Bacon</b> as fast as you can.</p>
            <p>Pick a starter word, or enter your own:</p>
        </div>
        <div id="seedWordsContainer">
            @foreach (var word in Model) {
                <button onclick="getNextWordFromButton(event);" class="btn-primary button-spaced">@word</button>
            }
        </div>
        <br />
        <a id="goBack" class="btn btn-light" href="#" style="display: none;">🔙 <span id="previousWord"></span></a>
        <br />
        <br />
        @Html.ActionLink("🔄 Start over", "Index", "Bacon8r", null, new { @class = "btn btn-outline", id = "startOver", style = "display: none;"})
        <br />
        <br />
        <div id="enterAWord">
            <label for="word">Enter a word</label>
            <input type="text" id="word" />
            <button id="go" class="btn-primary">Let's go</button>
        </div>
        <span id="iterationCount" data-count="1">1</span>
        <div id="flashingNumber" class="modal"></div>
    </div>
</div>
<div id="baconated">
    <input type="hidden" id="totalAttempts" />
    <h2>You did it big dawg!</h2>
    <div style="word-wrap: break-word; overflow-wrap: break-word;">
        You connected <b><span id="firstWord"></span></b> to <b>Kevin Bacon</b> with <span id="degreesOfSeparation"></span> degrees of separation in <span id="totalIterations"></span> clicks.
        <br />
        <pre id="pathHistory" style="white-space: pre-wrap; word-wrap: break-word;"></pre>
    </div>
    
    @Html.ActionLink("🔄 Start over", "Index", "Bacon8r")
</div>

@section Scripts {
    <script>
        let wordHistory = [];
        let showDiagnostics = true;

        $('#go').on('click', function (e) {
            e.preventDefault();

            let word = $('#word').val();
            GetNextWords(word);
        });

        function getNextWordFromButton(e) {
            e.preventDefault();

            let word = e.target.innerHTML;
            GetNextWords(word);
        }

        function GetNextWords(word) {
            $('#navigationContainer').hide();
            $('#enterAWord').hide();


            if (checkKevinBacon(word)) {
                let iterationCount = $('#iterationCount').attr('data-count');
                $('#degreesOfSeparation').text(wordHistory.length);
                $('#totalIterations').text(iterationCount);
                $('#firstWord').text(wordHistory[0]);
                $('#resultsContainer').hide();
                $('#pathHistory').text(
                    wordHistory.map((value, index) => `${index + 1}. ${value}`).join(' → ')
                );
                $('#baconated').show();
            }
            else {
                if (wordHistory.indexOf(word) < 0) {
                    wordHistory.push(word);
                    $('#previousWord').html(word);
                }
                updateGoBackVisibility();
                $('#startOver').show();
                $.ajax({
                    url: "/Bacon8r/GetNextWords",
                    type: "GET",
                    data: {
                        word: word
                    },
                    success: function (data) {
                        incrementIterationCount();
                        populateNewWords(data);
                        checkKevinBacon(data);

                        if (showDiagnostics) {
                            showDiagnosticsInConsole(word);
                        }
                    }
                });


            }
        }

        function populateNewWords(data) {
            let container = $('#seedWordsContainer');

            $(container).html('');
            data.forEach(word => {
                const button = document.createElement('button');
                button.classList.add('btn-primary', 'button-spaced');
                if (checkKevinBacon(word)) {
                    button.classList.add('special');
                }
                button.innerText = word;
                button.onclick = button.onclick = function (event) {
                    getNextWordFromButton(event);
                };
                container.append(button);
            });
        }

        function incrementIterationCount() {
            let iterationCount = $('#iterationCount').attr('data-count');
            let currentValue = parseInt(iterationCount, 10);
            let nextValue = currentValue + 1;
            $('#iterationCount').data('count', nextValue)
            $('#iterationCount').attr('data-count', nextValue);
            $('#iterationCount').text(nextValue);
            showFlashingNumber(nextValue);
        }

        function showFlashingNumber(value) {
            let modal = $('#flashingNumber');
            modal.text(value);
            modal.css('display', 'block');

            modal.animate({ opacity: 1 }, 150) // Flash in
                .delay(150)
                .animate({ opacity: 0 }, 150, function () { // Fade out
                    modal.css('display', 'none');
                });
        }

        function checkKevinBacon(word) {
            if (word === "Kevin Bacon") {
                return true;
            }
        }

        function updateGoBackVisibility() {
            if (wordHistory.length > 1) {
                $('#goBack').show();
            } else {
                $('#goBack').hide();
            }
        }

        $('#goBack').on('click', function (e) {
            e.preventDefault();
            wordHistory.pop();
            let previousWord = wordHistory.pop();
            if (previousWord) {
                GetNextWords(previousWord);
            }
            updateGoBackVisibility();
        });

        function showDiagnosticsInConsole(word) {
            console.log(wordHistory);
            console.log(word);
        }

    </script>
}